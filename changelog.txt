2024/02/12 Alpha Update (v0.9.1):
 * Vectorised find_spots detect.py numpy code for faster speeds in OMP.
 * The diagnostic PDF is now created after scale, extract, and filter sections for the user to see.
 * Pre-sequence images are now blurred before computing the background scale and subtracting from sequencing images.


2024/02/07 Alpha Update (v0.9.0):
 * The appropriate, tested package versions are installed by `pip install -r requirement...` with the wanted 
    requirements text file.
 * Coppafish no longer has installation options, you just do `pip install -e .` to install coppafish after installing a 
    requirements text file. 
 * New support for pytorch on the CPU as a new way to run most of OMP functions and some parts of call spots using CPU. 
    The appropriate packages can be installed by `pip install -r requirements-pytorch.txt`. 
 * Pytorch 2.2.0 + cuda 12.1 is supported. The GPU is used to run parts of OMP. In detail, `get_all_coefs` will run 
    with all tensors on the GPU when looping through OMP iterations. Then, when complete, the returned output will be 
    on the CPU to not run out of memory on the GPU. The required packages can be installed by 
    `pip install -r requirements-pytorchgpu.txt`.
 * Support for Windows when running coppafish with pytorch, pytorch with a GPU, or numpy-only.
 * For a single spot and round, if the largest magnitude spot colour is negative, its sign is flipped before computing 
    the Von-Mises gene probability.
 * OMP call spots colour norm factor applied incorrectly has now been fixed.
 * "extract_debug" notebook page checks still being used are now removed since the page does not exist any more fix.
 * Coppafish version number is printed at the start of a pipeline run.
 * Ref spot PDF plots are now consistent with x and y axes.


2024/02/06 Alpha Update (v0.8.3):
 * Out of bounds in z direction image retrieval in register section fix.


2024/01/31 Alpha Update (v0.8.2):
 * The default config value for r_smooth in filter section is now 1, 1, 2.
 * The notebook now backs itself up before re-saving itself. Therefore, there is always a fully complete notebook saved 
    in case the new one being saved gets corrupted.
 * Removed 'extract_debug' notebook page.
 * Comparing spot colour and predicted code in Viewer bug fixed.
 * The mean spot colour for probabilities > 0.7 now plotted in ref_spots.pdf.
 * New documentation (https://reillytilbury.github.io/coppafish/) for users.
 * Removed 'extract_debug' notebook page.


2024/01/26 Alpha Update (v0.8.1):
 * Bleed matrix computation in call spots has been slightly improved and is capable of reverting to a default bleed 
    matrix if there are too few genes to compute with.
 * Background scale computation for the preseq is thought to be improved and only computed using a single, registered z 
    plane. Now only a scale factor is computed, no offset.
 * Config variable auto_n_shifts in stitch section is no longer a magic number, it now scales with tile size fix.
 * Dask array was converted to a float for jobs raw data has been fixed.
 * view_find_spots diagnostic is now fixed.
 * view_stitch diagnostic is now fixed.
 * Config variable n_background_scale_threads in register renamed to max_background_scale_cores
 * Tile, round, channel indexing for extract, filter and find_spots now originates from functions in utils/indexing.py.
 * requirements.txt and requirements-optimised.txt files for python==3.9 fixed.
 * Sub Volume Registration (SVR) now has a tapered window applied to each subvolume image (Hanning in x and y, a Tukey 
    window in z). This removes x, y and z axes aligned fake registration solutions caused by the image's harsh border.
 * Removed call_spots bleed_matrix.py unused code.
 * Removed outdated 2d pipeline code.
 * The notebook duplicates itself before adding and saving with a new notebook page included. This way if the code is 
    user interrupted during a save, a backup notebook is available to revert to that will not be corrupted. The backup 
    will automatically be deleted after the new save is fully complete.
 * New notebook tile by tile combining functionality reimplemented.


2024/01/12 Alpha Update (v0.8.0):
 * Filtered images are now saved in ['file_names']['tile_dir']/filter and extract images are saved in 
    ['file_names']['tile_dir']/extract.
 * Removed notebook variables pixel_unique_values and pixel_unique_counts from ['filter_debug'] and ['extract_debug'] 
    sections. These will be saved locally in the tile output directory.
 * Extract and filter now continue where they left off. They are checkpoint-ed after each iteration.
 * Optimised choice of zarr compressors for extract and filter through benchmarking.
 * The PDF diagnostic saves a separate pdf for each section, these sections are then not rebuilt if they already exist.
 * Some of the subplots inside the Viewer had the colour norm applied incorrectly, this has been fixed.
 * Each gene page in the PDF diagnostic is now computed correctly.
 * Removed old function called regularise_auto_thresh relating to filter that is never used any more.
 * Renamed get_extract_info to get_filter_info and moved it to the filter section.
 * requirements.txt files for optimised setup option.
 * 'plotting' option is removed, the plotting packages are always installed.
 * Deleting unused file image_stitcher.py from repository.


2024/01/09 Alpha Update (v0.7.2):
 * Filter will re-filter if the filter notebook page does not exist to correctly compute the filter variables bug fix.
 * Bled codes are normalised for each gene outside of a gene for loop, reducing OMP computation time.
 * The Viewer now has every hotkey described, these can be shown by opening the Viewer then pressing Shift + k.
 * Improved pixel value histograms in the PDF diagnostics for extract and filter.
 * BuildPDF is called fewer times throughout the pipeline to reduce compute time.
 * Middle z plane selection for registration with few z planes bug fixed.
 * Handling of invalid spot colours and their background colours in spot_colors bug fix.
 * jax memory leak in OMP is reduced or fixed.
 * Subset image loading for extract and filtered images is now faster on zarr.
 * Improved chunking of y and x dimensions on .zarr files.
 * Zarr arrays are read faster by using more available cores on the CPU to decompress files.
 * RoboMinnie `n_rounds != n_channels` integration test.


2024/01/03 Alpha Update (v0.7.1):
 * Bug fix for gene efficiency calculation in call_reference_spots.py.


2024/01/02 Alpha Update (v0.7.0):
 * New diagnostics PDF builder has been created. It can be imported through `from coppafish import BuildPDF`, then with 
    the notebook file path as nb_path, it can be run by `BuildPDF(nb_path)`. It currently shows diagnostic plots for 
    scale, extract, filter and find_spots sections. The PDF builds itself at runtime after find_spots, stitch, 
    reference_spots and OMP and saved as diagnostics.pdf in the output directory.
 * New coppafish installation instructions shown on the GitHub homepage (readme.md).
 * Frozen stable package versions given in the "requirements.txt" file, see GitHub homepage for instructions on 
    installation.
 * Bug fixed most of the Viewer plots with the updated call_spots colour norm factor and bleed matrix variables.
 * Gene shape in viewer versus gene legend mismatch bug fix.
 * Removed unnecessary multiplying and dividing by weights in OMP when computing weighted least squares fitting 
    (potential speed up).


2023/12/21 Alpha Update (v0.6.1):
 * Extraction directory now created in extract step of pipeline bug fix.


2023/12/21 Alpha Update (v0.6.0):
 * `export_to_pciseq` function now supports exporting gene probabilities.


2023/12/19 Alpha Update (v0.5.0):
 * Extract and filter has now become two separate sections in the notebook. Extract runs first, then filter. We save 
    raw, extracted images in the tiles_dir/raw directory. Also, when running from raw ND2 files, we keep all the found 
    metadata from the ND2s for each round in a file called 'nd2_metadata_r{r}.pkl' inside the tiles_dir/raw directory. 
    This way we hope the raw ND2 files can be deleted without loss of any data.
 * All filter related config variables are now inside a new [filter] config section, i.e. variables r_dapi, 
    r_dapi_auto_microns, auto_thresh_multiplier, deconvolve, all psf-related variables, wiener_constant, 
    wiener_pad_shape, n_clip_warn, n_clip_error, n_clip_error_images_thresh, num_rotations and pre_seq_blur_radius.
 * Default extraction file type (['extract']['file_type']) is now .zarr instead of .npy. This file_type is also used 
    when saving the filtered images in the tiles_dir directory.
 * Multiprocessing to compute background scales now includes no disk reading (safer).
 * The disk reading multiprocessing in OMP has been removed (safer).
 * The git hash and software version for each notebook section is saved when that pipeline section is run through.
 * OMP now runs on a single z plane at a time.
 * Default psf_isolation_dist in 'filter' config section changed from 20 -> 10.
 * psf is calculated on no more than 5,000 isolated spots to stop memory crashes in the filter section. This should be 
    more than sufficient to converge.
 * Call spots probability thresholds are not constants any more, they are now computed percentiles based on the gene 
    probability values.
 * Shift score hist in SVR diagnostics in the Registration Viewer now does not crash.
 * Round score shift colour-map in SVR diagnostics in the Registration Viewer is fixed when z_subvols is 1.
 * If a notebook is run on two different versions, a warning is given and the user is asked if they want to continue.
 * The notebook now contains variables pixel_unique_values and pixel_unique_counts in 'extract_debug' and 
    'filter_debug' pages. They contain a count of every unique pixel in the unfiltered and filtered images for future 
    diagnostics.
 * Fixed a register image shifting bug.
 * Fixed deconvolution bug.
 * Fixed reg_images not being saved after crashing on.
 * Fixed bugs when basic_info.use_z does not include 0.
 * Silenced notebook numpy-related warning.
 * Silenced jax CPU warning.


2023/11/16 Alpha Update (v0.4.0):
 * Improved outlier removal for shift calculations in registration.
 * Further optimisations.
 * Memory issue fix in OMP.
 * The Viewer now has a button to show gene calling based on the gene probabilities, labelled as 'Prob'.
 * Various bug, deprecation and warning fixes.


2023/10/28 Alpha Update (v0.3.0):
 * Saving extracted tiles as .npy is the default save file type. Can be changed to .zarr (50% compression) by setting 
    config['extract']['file_type'] = .zarr.
 * Compatibility with JOBS datasets.
 * Computing background scale factors is now parallelised.
 * Various bug and warning fixes.


2023/10/10 Alpha Update (v0.2.0):
 * Added background subtraction with 3D registration using DAPI images.
 * Cross-tile brightness difference correction support, probably caused by microscope auto gain control.
 * Updated bleed matrix to allow inter-tile variation.
 * Updated the bleed matrix calculation.
 * Added weighted dot product method with backwards compatibility.
 * Error handling unconnected tiles.
 * Changed spot_no array from uint16 to uint32 for greater spot number support.
 * Registration pipeline now uses DAPI images when necessary.
 * Registration pipeline now computes camera transforms from fluorescent beads, if they exist.
 * Added new config variable [file_names][initial_bleed_matrix] to give a path to a `.npy` initial bleed matrix. 
    If left empty, will use the default initial bleed matrix in the source code.
 * Presequence .npy raw files support.
 * Fixed anchor auto threshold being set to zero due to regularisation.
 * OMP's z-chunking now scales with the PC's available memory. We think that more memory means slightly faster OMP.
 * Various bug, warning and deprecation fixes.
 * Utils, call spots and register unit tests.
 * RoboMinnie integration testing for single and multiple tile dataset generation.
